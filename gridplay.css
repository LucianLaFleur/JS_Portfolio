@import url('https://fonts.googleapis.com/css?family=Yesteryear&display=swap');


body {
  margin:0;
  padding:0;
  box-sizing: border-box;
}

.navbar{
  position: fixed;
  height: 80px;
  /* overflow: hidden; */
  top:0;
  display:flex;
  min-width: 910px;
  align-items: center;
  background: #726;
  width: 100%;
  /* higher z index puts it in front of other elements */
  z-index: 10;
}
.logo {
  background: url(../../assets/images/bloodborne_art.png) no-repeat;
  background-size: contain;
  width: 300px;
  height: 80px;
  float:left;
  margin-left:20px;
}
.logo h1{
  color: rgb(238, 206, 65);
  font-size: 50px;
  font-family: 'Yesteryear', cursive;
  letter-spacing: 6px;
  width: 370px;
  margin: 10px 0 0 80px;
}

#fixedmenu {
  display: none;
  position: absolute;
  left: 510px;
}
.menu button{
  color: #aaf;
  font-size:22px;
  font-weight:bold;
  text-decoration:none;
  margin: 0 5px;
  padding: 10px;
  transition: color .8s, background 0.3s;
  border: none;
  border-radius: 4px;
}
.menu button:hover {
  color: rgb(238, 206, 65);
  background: rgb(185, 82, 82);
}

/**********************
dropdown stuff
 */
 .dropbtn {
  background-color: #404;
  color: white;
  padding: 16px;
  font-size: 16px;
  border: none;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #ca4;
  border-radius: 10%;
  min-width: 160px;
  /* box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); */
  z-index: 1;
}
.dropdown-content a {
  color: #aaf;
  border-radius:10%;
  font-size: 18px;
  font-weight: 700;
  background-color: #404;
  margin: 10px 0;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}
.dropdown-content a:hover{
  color: blue;
  background-color: #77c;}

/* GAME CHANGING STUFF DOWN HERE */
.dropdown:hover .dropdown-content {display: block;}

.header {
  width: 100%;
  height: 15px;
  background:#726;
  margin-top:80px;
}

/**********************
three-line button at top right corner
*/

.top_r_btn {
  display:block;
  position:absolute;
  left: 450px;
}
.top_r_btn:hover > span {
  color: rgb(238, 206, 65);
  background: rgb(185, 82, 82);
}
.top_r_btn span{
  /* make a 3-line button symbol */
  display:block;
  margin: 6px;
  width: 40px;
  height: 3px;
  background: black;
}

/**********************
grid below
 */

.sidebar {
  font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;
  font-weight: bold;
  color: #225;
}
.sidebar p {
  background: #55a;
  color: white;
  font-size: 20px;
  text-indent: -9999px;

  display: block;
  width: 100px;
  height: 5vh;
  padding: 6px;
  margin-left: -100px;
  border-radius: 8px;
  transition: 0.5s all;
}
.sidebar p:hover{
  margin-left: -10px;
}
#l_tab1 {
  background: #115;
}
#l_tab2 {
  background: #DBD3D8;
}
#l_tab3 {
  background: #D77A41;
}
#l_tab4 {
  background: #048BA8;
}

#grid_g1 {
  background: #115;
  color:white;

  text-align: center;
  font-size: 20px;

  display: grid;
  grid-template-columns:repeat(10, 1fr);
  grid-template-rows: 6vh repeat(3, 18vh) 6vh;

  /* repeat(5, 50px); */
  grid-gap: 10px;

  grid-template-areas:
  "tl tl tb tb tb tb tb tb tb rf"
  "lm lm cc cc cc cc cc cc cc rf"
  "lm lm cc cc cc cc cc cc cc rf"
  "lm lm cc cc cc cc cc cc cc rf"
  "bb bb bb bb bb bb bb bb bb bb"
  ;
  margin-bottom: 10px;
  padding: 20px 0;
}
#g1_top_left {
  grid-area: tl;
  background: cyan;
  margin: 0 0 0 10px;
}
#g1_top_bar {
  grid-area: tb;
  background: red;
  margin-right: 10px;
}
#reserve3 {
  grid-area: rf;
  background: rgb(0, 255, 64);
  margin-right: 10px;
}
#g1_left_menu {
  grid-area: lm;
  background: rgb(241, 222, 112);
  margin: 0 25px 0 25px;
  overflow: hidden;
  min-width: 110px;
}
#reserve5 {
  grid-area: cc;
  background: grey;
  margin: 0 10px 0 0;
}
#g1_bot_bar {
  grid-area: bb;
  background: #705;
  margin: 0 10px 0 10px;
}

.animations1 {
  background: blue;
  text-align: center;
  display: block;
  width:100vw;
  padding: 20px;
  /* transition: all 1s ease; */
  /* background and elements are rendered across 3 seconds on page load */
}
.animations1 div{
  outline: 5px solid black;
  background: gold;
  color: #407;
  font-size: 20px;
  height: 100px;
  width: 100px;
  margin: 15px;
  transition: all .3s linear;
}
.animations1 div p{
  padding: 40px 0;
}
.animations1 div:hover{
  outline: 5px solid black;
  outline-offset: -10px;
  /* below makes all slide to the right by 30px, maybe useful for menu items */
  /* transform: translateX(30px); */
}
.box1:hover {
  background: white;
  outline: 5px solid black;
  transform: translateX(30px);
}
.box2:hover {
  animation-name: test1;
  outline-offset: 0px;
  animation-duration: 2s;
  animation-iteration-count: 1;
}
.box3:hover {
  animation: whirl1 3s;
}
.box4:hover {
  animation: vision1 4s;
  /* note how opacity and border offset both start radial from outside in, so they complement one another on a disappearing effect */
}
.box5:hover {
  /* rave party */
  animation: rainbowflash1 1s;
  animation-iteration-count: 8;
}
.box6:hover {
  animation: aquaticFlash 5s;
  animation-iteration-count: 2;
}

/* arc animation test */
@keyframes test1 {
  0% { transform: translate(0px, 0px) rotate(0deg); }
  50% { transform: translate(220px, -40px) rotate(-45deg);}
  100% {transform: translate(440px, 40px) rotate(45deg);
  }
}

/* spins forward, spins a bit back, then drags back to start
note: values are relative to the original position of the item, --not-- to the previous percent*/
@keyframes whirl1 {
  0% { transform: translate(0px, 0px) rotate(0deg); }
  40% { transform: translate(200px, 0px) rotate(720deg); }
  60% { transform: translate(150px, 0px) rotate(530deg); }
  100% { transform: translate(0px, 0px) rotate(530deg); }
}
/* playing with opacity to briefly see things clear before they get obfuscated again */
@keyframes vision1 {
  0% {
    transform: translate(0px, 0px);
    opacity: 1;
  }
  10% {
    transform: translate(0px, 0px);
    opacity: 0;
  }
  25% {
    transform: translate(0px, 0px);
    opacity: .20
  }
  65% {
    transform: translate(0px, 0px);
    opacity: 1
  }
  /* 85% {
    transform: translate(0px, 0px);
    opacity: 0
  } */
}

@keyframes rainbowflash1 {
  0% {
    transform: translate(0px, 0px);
    background: rgb(251, 255, 0);
  }
  16% {
    transform: translate(0px, 0px);
    background: rgb(255, 255, 255);
  }
  33% {
    transform: translate(0px, 0px);
    background: rgb(0, 255, 21);
  }
  50% {
    transform: translate(0px, 0px);
    background: rgb(15, 138, 255);
  }
  66% {
    transform: translate(0px, 0px);
    background: rgb(183, 0, 255);
  }
  83% {
    transform: translate(0px, 0px);
    background: rgb(200, 170, 150);
  }
  100% {
    transform: translate(0px, 0px);
    background: rgb(255, 0, 76);
  }
}

  @keyframes aquaticFlash {
    0% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 255);
    }
    16% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 100);
    }
    33% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 200);
    }
    50% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 155);
    }
    66% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 210);
    }
    83% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 140);
    }
    100% {
      transform: translate(0px, 0px);
      background: rgb(100, 100, 196);
    }
}

.watermelon_container {
  border: 5px solid black;
  height:30vh;
  width:50vw;
  min-width: 400px;
  position: relative;
  display: flex;
  align-content: center;
  justify-content: space-around;
}
.watermelon_container::before {
  content: "... ... ... Hover over box, pls ... ... ...";
  /* text-align: center; */
  border: 15px solid rgb(12, 120, 163);
  height: 100%;
  width: 100%;
  box-sizing:border-box;
  position: absolute;
}
img {
  height:100%;
  display: flex;
}
.watermelon {
  border: 5px solid black;
  background: green;
  color: white;
  /* height: 130px;
  width: 130px; */
  display:flex;
  /**** percentages will stretch with the div itself, distorting proportions*/
  height: 55%;
  width: 26%;
  align-items: center;
  text-align: center;
  margin: auto;
  z-index: 1;
  /* need a nested item to pull up z index because otherwise the main div will hide it */
}
.watermelon:hover {
  border:none;
  background: red;
  color: black;
  border-radius:50%;
  transition-property: border, background, color,  border-radius;
  transition-duration: 1s, .5s, 3s, .5s;
}

.shake_container {
  background:#348;
  padding-bottom: 40px;
}
#shake_header {
  background: #849;
  color:white;
  text-align: center;
}
#shaky_think {
  height:200px;
  margin:auto;
}
#shaky_think:hover {
  /* Start the shake animation and make the animation last for 0.5 seconds */
  animation: shake1 0.5s;
  /* When the animation is finished, loop thru 4 more times; to go perpetually, use reserved word [infinite] */
  animation-iteration-count: 4;
}
@keyframes shake1 {
  0% { transform: translate(1px, 1px) rotate(0deg); }
  10% { transform: translate(-1px, -2px) rotate(-1deg); }
  20% { transform: translate(-3px, 0px) rotate(1deg); }
  30% { transform: translate(3px, 2px) rotate(0deg); }
  40% { transform: translate(1px, -1px) rotate(1deg); }
  50% { transform: translate(-1px, 2px) rotate(-1deg); }
  60% { transform: translate(-3px, 1px) rotate(0deg); }
  70% { transform: translate(3px, 1px) rotate(-1deg); }
  80% { transform: translate(-1px, -1px) rotate(1deg); }
  90% { transform: translate(1px, 2px) rotate(0deg); }
  100% { transform: translate(1px, -2px) rotate(-1deg); }
}

.intense_shake_container {
  background:rgb(65, 180, 165);
  padding-bottom: 40px;
}
#intense_shake_header {
  background: rgb(191, 72, 214);
  color:white;
  text-align: center;
}
#intense_shaky_think {
  height:200px;
  margin:auto;
}
#intense_shaky_think:hover {
  /* the animation name can be whatever, it's a malleable variable name not a reserved word*/
  animation: shake2 0.5s;
  animation-iteration-count: 5;
}
@keyframes shake2 {
0% { transform: translate(11px, 11px) rotate(0deg); }
10% { transform: translate(-11px, -12px) rotate(-5deg); }
20% { transform: translate(-13px, 10px) rotate(5deg); }
30% { transform: translate(13px, 12px) rotate(0deg); }
40% { transform: translate(11px, -11px) rotate(5deg); }
50% { transform: translate(-11px, 12px) rotate(-5deg); }
60% { transform: translate(-13px, 11px) rotate(0deg); }
70% { transform: translate(13px, 11px) rotate(-5deg); }
80% { transform: translate(-11px, -11px) rotate(5deg); }
90% { transform: translate(11px, 12px) rotate(0deg); }
100% { transform: translate(11px, -12px) rotate(-5deg); }
}

.intense_shake_container2 {
  background:#ca5;
  padding-bottom: 40px;
}
#intense_shake_header2 {
  background: rgb(191, 72, 21);
  color:white;
  text-align: center;
}
#intense_shaky_think2 {
  height:200px;
  margin:auto;
}
#intense_shaky_think2:hover {
  /* the animation name can be whatever, it's a malleable variable name not a reserved word*/
  animation: smoothShake 2s;
  animation-iteration-count: infinite;
}
@keyframes smoothShake {
0% { transform: /*translate(11px, 11px)*/ rotate(0deg); }
9% { transform: /*translate(-11px, -12px)*/ rotate(-5deg); }
18% { transform: /*translate(-13px, 10px)*/ rotate(0deg); }
27% { transform: /*translate(13px, 12px)*/ rotate(5deg); }
36% { transform: /*translate(11px, -11px)*/ rotate(0deg); }
45% { transform: /*translate(-11px, 12px)*/ rotate(-5deg); }
54% { transform: /*translate(-13px, 11px)*/ rotate(0deg); }
63% { transform: /*translate(13px, 11px)*/ rotate(5deg); }
72% { transform: /*translate(-11px, -11px)*/ rotate(0deg); }
81% { transform: /*translate(11px, 12px)*/ rotate(-5deg); }
90% { transform: /*translate(11px, -12px)*/ rotate(0deg); }
100% { transform: /*translate(11px, -12px)*/ rotate(5deg); }
}

.shadow_div {
  background: #cfa;
  width: 40vw;
  height: 30vh;
  margin: 20px;
  box-shadow: 2px 3px 2px #715
}
.shadow_heading{
  background: rgb(70, 19, 9);
  color: rgb(68, 52, 233);
  /* x-axis nudge, y-axis nudge, blur */
  text-shadow: 2px -2px 3px rgb(250, 237, 118);
}

.samp_block1 {
  --headingGold : rgb(250, 200, 10);
  --solidBlue : rgb(49, 52, 219);
  --simpleFade : all .5s linear;
  --flamingoPink : #f1f;
  background: var(--solidBlue);
  padding: 10px 20px;
}
.samp_block1 p:nth-child(even) {
  border: 5px solid #666;
}
.samp_head {
  color: var(--headingGold);
}
#cia_censor {
  /* background: black;
  color: black; */
  filter: blur(7px);
  padding: 0 3px;
}
#cia_censor:hover {
  /* background: var(--solidBlue);
  color: var(--headingGold); */
  filter: blur(0px);
  transition: all .3s linear;
}

.samp_block1 p {
  border: 5px solid black;
  /* color: var(--solidBlue); */
  background: black;
  margin: 10px 0 10px 0;
  /* filter: blur(8px); */
}
.samp_block1 p:hover {
  color: var(--headingGold);
  transition: var(--simpleFade);
  filter: blur(0px);
}

.template_area_practice {
  background-color: #6b7;
  display:grid;
  grid-gap:5px;
  /* below, col-width defined by template, giving us 12 equal units across */
  grid-template-columns: repeat(12, 1fr);
  /* below, row-height defined */
  grid-template-rows: 40px 40vh 40px 20px;
  /* the template below is a representation of the layout where I've got twelve columns above, so I've got 12 placeholders in each of my 3 defined rows. */
  grid-template-areas:
  "aq aq aq aq aq aq aq aq aq aq aq aq"
  "tm lm lm lm lm lm lm lm lm ch in in"
  "pe pe xx xx xx gr gr gr gr gr gr gr"

  /* an incorrect number of items in a column will break the whole representation */
}

#template_aqua {
  background-color: aqua;
  /* note the value for [grid-area] doesn't need to be "quoted" like a string. It can be naked */
  grid-area: aq;
}
#template_tomato {
  background-color: #f65;
  /* the placeholders don't need to be 2 chars long, but should be of uniform length to not distort the evenness of the template representation. */
  grid-area: tm;
}
#template_lime {
  background-color: #cfa;
  grid-area: lm;
}
#template_cherry {
    background-color: #c36;
    grid-area: ch;
}
#template_indigo {
  background: #115;
  color:white;
  grid-area: in;
  margin-right: 5px;
}
#template_peach {
background-color: #fb8;
grid-area: pe;
}
#template_froggreen {
  background-color: rgb(108, 114, 56);
  grid-area: gr;
}


.container1 {
  background-color: rgb(29, 167, 160);
  text-align: center;
  display:grid;
  grid-gap:5px;
  grid-template-columns: repeat(12, 1fr);
  /* template : row1 row2 row3*/
  /* if I want all 3 columns the same fractional columns: repeat(3, 1fr)*/
  grid-template-rows: repeat(3, 20vh);
  grid-template-areas:
  ". . . . . no no . . . . ."
  "we we . . . . . . . . ea ea"
  ". . . . . so so . . . . ."
}

#one {
  background-color: aqua;
  grid-area: x1;
}
.north_container {
  background-color: #f65;
  grid-area: no;
  display:flex;
  justify-content: center;
  /* object-fit:cover; */
}
#two{
  align-self: center;
  /* margin:auto; */
}
#three {
  background-color: #cfa;
  grid-area: x2;
}
#four {
  background-color: #fb8;
  grid-area: we;
}
#five {
  background-color: rgb(80, 192, 129);
  grid-area: x3;
}
#six {
  background-color: #c36;
  grid-area: ea;
}
#seven {
  background-color: #588;
  grid-area: x4;
}
#eight {
  background-color: #b8a;
  grid-area: so;
}
#nine {
  background-color: #348;
  grid-area: x5;
}
/*******************
Second division set
 ********/
 /* below, shorthand in grid template for rows //slash// columns */

.container2 {
  background-color: rgb(49, 9, 69);
  display:grid;
  grid-template-columns: repeat(12, 1fr);
  grid-template-rows:40px 250px 40px;
  grid-gap:10px;
}

#header {
  background-color: aqua;
  text-align: center;
  font-size: 25px;
  grid-column-start: 1;
  grid-column-end: -1;
  /*column line is like the start of the column, so you need to reach the start of the 3rd column line to span competely across 3 columns
  1|       2|     3|
   |content |      |
   |across two cols|

   can also be written:
   grid-column: 1 / span 2;
   (spans across 2 cols)

   grid-column: 1 / -1
   (always spans to the last col, useful if you don't know how many cols you're going to have)
   Like targeting the last item in an array as -1, if you're familiar with general programming.
   */
}
#left_menu {
  background-color: #f65;
}
#content {
  background-color: #cfa;
  grid-column: 2/-2;
}
#right_menu {
  background-color: #fb8;
}
#footer {
  background-color: rgb(80, 192, 129);
  grid-column: 1/-1;
}
/* #six_two {
  background-color: #c36;
}
#seven_two {
  background-color: #588;
}
#eight_two {
  background-color: #b8a;
}
#nine_two {
  background-color: #348;
} */

.container3 {
  background-color: rgb(49, 9, 69);
  display:grid;
  grid-template-columns: repeat(12, 1fr);
  /* give me a bunch of uniform-width columns; this allows us to use column-start and column-end properties to manipulate grid layout */
  grid-template-rows:40px 250px 40px;
  /* give me these heights for the 3 rows I want */
  grid-gap:10px;
}
#header3 {
  background-color: aqua;
  text-align: center;
  font-size: 25px;
  grid-column-start: 2;
  grid-column-end: -1;
  /* start at 2nd column-line all the way to the end */
  margin-top:10px;
}
#left_menu3 {
  background-color: #f65;
  grid-row: 1/3;
  /* start at first row-line, end at third row-line; this leaves space for the footer */
}
#content3 {
  background-color: #cfa;
  grid-column: 2/-1;
  margin-right: 10px;
}
#bot_left_orange_block {
  background-color: #fb8;
  /* no special rules needed for this to span 1fr, this width is inherited from the container3 class up top */
}
#footer3 {
  background-color: rgb(80, 192, 129);
  grid-column: 2/-2;
}
#dropup_menu3 {
  background-color: #c36;
}
